{
 "metadata": {
  "name": "",
  "signature": "sha256:58e48f5a49a02f330e53b20d63d9f970f03cc41e0406cccba76e09239a4659ad"
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "#!/usr/bin/env python\n",
      "\n",
      "import underworld as uw\n",
      "import getopt\n",
      "import sys\n",
      "import os\n",
      "\n",
      "script = None\n",
      "# Parse options for commandline usage\n",
      "try:\n",
      "    opts, args = getopt.getopt(sys.argv[1:], \"s:\", \n",
      "       [\"script=\"])\n",
      "except getopt.GetoptError, err:\n",
      "    # print help information and exit:\n",
      "    print str( err ) # will print something like \"option -a not recognized\"\n",
      "    print \"set your input script using the '--script=' option\"\n",
      "    sys.exit( 2 )\n",
      "for o, a in opts:\n",
      "    if o in (\"--script\"):\n",
      "        script = a\n",
      "\n",
      "if( script == None ):\n",
      "  print \"A script must be provided.\"\n",
      "  print \"Set your input script using the '--script=' option\"\n",
      "  sys.exit( 2 )\n",
      "\n",
      "\n",
      "# ok, init so that we know our rank\n",
      "rank = uw.rank()\n",
      "\n",
      "scriptFile = open(script, 'r')\n",
      "\n",
      "hasProperInit=False\n",
      "\n",
      "# grab stdout for later\n",
      "stdoutguy = sys.stdout\n",
      "stderrguy = sys.stderr\n",
      "\n",
      "for line in scriptFile:\n",
      "  splitline = line.split()\n",
      "  if len(splitline) == 0:\n",
      "  \tcontinue\n",
      "  firstTok = splitline[0]\n",
      "  # ok, run anything required\n",
      "  if firstTok != \"mpiexec\" and rank == 0:\n",
      "     os.system(line)\n",
      "  # now, read uw command line\n",
      "  if firstTok == \"mpiexec\":\n",
      "     mpilinesplit = line.split(\">> \")\n",
      "     nonredirectline = mpilinesplit[0]\n",
      "     uwline = os.popen( \"echo \"+nonredirectline ).read()\n",
      "     uwlinesplit = uwline.split()\n",
      "     # redirect as required\n",
      "     outfile = mpilinesplit[1].split(\" 2>&\")[0]\n",
      "     # do initial proper init\n",
      "     if not hasProperInit:\n",
      "        hasProperInit = True\n",
      "        tempdir = \"./output/\"\n",
      "        uw.Init( uwlinesplit[4:] + [\"--outputPath=\"+tempdir] + [\"--components.camera_plot.autoZoomTimestep=0\", \"--components.database.Context=context\"] )\n",
      "        # grab the dict, and change things\n",
      "        stgdict = uw.dictionary.GetDictionary()\n",
      "        stgdict[\"components\"][\"database\"][\"blocking\"]=True\n",
      "\n",
      "        uw.Construct()\n",
      "        # get things\n",
      "        basalTempWSPpc = uw._stgermain.GetLiveComponent(\"basalTempWSPpc\")\n",
      "        basalTempESPpc = uw._stgermain.GetLiveComponent(\"basalTempESPpc\")\n",
      "        basalTempWNPpc = uw._stgermain.GetLiveComponent(\"basalTempWNPpc\")\n",
      "        basalTempENPpc = uw._stgermain.GetLiveComponent(\"basalTempENPpc\")\n",
      "        sedimentKPpc   = uw._stgermain.GetLiveComponent(\"sedimentKPpc\")\n",
      "        sedimentHPPpc  = uw._stgermain.GetLiveComponent(\"sedimentHPPpc\")\n",
      "        basementKPpc   = uw._stgermain.GetLiveComponent(\"basementKPpc\")\n",
      "        basementHPPpc  = uw._stgermain.GetLiveComponent(\"basementHPPpc\")\n",
      "        mantleKPpc     = uw._stgermain.GetLiveComponent(\"mantleKPpc\")\n",
      "        mantleHPPpc    = uw._stgermain.GetLiveComponent(\"mantleHPPpc\")\n",
      "        context        = uw._stgermain.GetLiveComponent(\"context\")\n",
      "        database       = uw._stgermain.GetLiveComponent(\"database\")\n",
      "\n",
      "     # ok, now lets do some actual work\n",
      "     # get & set required vals from command line\n",
      "     sys.stdout = open(outfile, 'w')\n",
      "     sys.stderr = open(outfile, 'w')\n",
      "\n",
      "     for item in uwlinesplit:\n",
      "        if   item.startswith(\"--basalTempWS=\"):\n",
      "           basalTempWSPpc.val = item.split(\"=\")[1]\n",
      "        elif item.startswith(\"--basalTempES=\"):\n",
      "           basalTempESPpc.val = item.split(\"=\")[1]\n",
      "        elif item.startswith(\"--basalTempWN=\"):\n",
      "           basalTempWNPpc.val = item.split(\"=\")[1]\n",
      "        elif item.startswith(\"--basalTempEN=\"):\n",
      "           basalTempENPpc.val = item.split(\"=\")[1]\n",
      "        elif item.startswith(\"--sedimentK=\"):\n",
      "           sedimentKPpc.val   = item.split(\"=\")[1]\n",
      "        elif item.startswith(\"--sedimentHP=\"):\n",
      "           sedimentHPPpc.val  = item.split(\"=\")[1]\n",
      "        elif item.startswith(\"--basementK=\"):\n",
      "           basementKPpc.val   = item.split(\"=\")[1]\n",
      "        elif item.startswith(\"--basementHP=\"):\n",
      "           basementHPPpc.val  = item.split(\"=\")[1]\n",
      "        elif item.startswith(\"--mantleK=\"):\n",
      "           mantleKPpc.val     = item.split(\"=\")[1]\n",
      "        elif item.startswith(\"--mantleHP=\"):\n",
      "           mantleHPPpc.val    = item.split(\"=\")[1]\n",
      "        elif item.startswith(\"--outputPath=\"):\n",
      "           outputPath = item.split(\"=\")[1]\n",
      "\n",
      "     if rank == 0:\n",
      "       uw.libUnderworld.gLucifer.lucDatabase_DeleteGeometry(database, 0, 1)\n",
      "\n",
      "     # lets reset this, else step increments\n",
      "     context.needUpdate=False\n",
      "     # do the solve\n",
      "     uw.Step()\n",
      "     # it's hackish, but lets move things around\n",
      "     if rank == 0:\n",
      "\t     os.system(\"rsync -aq \"+tempdir+\"/. \"+outputPath+\"/.\")\n",
      "     # now set stdout back\n",
      "     sys.stdout = stdoutguy\n",
      "     sys.stderr = stderrguy\n",
      "\n",
      "\n"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    }
   ],
   "metadata": {}
  }
 ]
}