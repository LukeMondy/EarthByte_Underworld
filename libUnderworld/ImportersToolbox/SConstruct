import sys, os, subprocess, platform

EnsureSConsVersion(0, 98)

# Colours
colours = {}
colours['cyan']   = '\033[96m'
colours['purple'] = '\033[95m'
colours['blue']   = '\033[94m'
colours['green']  = '\033[92m'
colours['yellow'] = '\033[93m'
colours['red']    = '\033[91m'
colours['end']    = '\033[0m'

# If the output is not a terminal, remove the colours.
if not sys.stdout.isatty():
   for key, value in colours.iteritems():
      colours[key] = ''

compile_source_message = '%sCompiling %s==> %s$SOURCE%s' % \
   (colours['blue'], colours['purple'], colours['yellow'], colours['end'])

link_program_message = '%sLinking Program %s==> %s$TARGET%s' % \
   (colours['cyan'], colours['purple'], colours['yellow'], colours['end'])

link_library_message = '%sLinking Library %s==> %s$TARGET%s' % \
   (colours['cyan'], colours['purple'], colours['yellow'], colours['end'])

ranlib_library_message = '%sRanlib Library %s==> %s$TARGET%s' % \
   (colours['cyan'], colours['purple'], colours['yellow'], colours['end'])

install_message = '%sInstalling %s==> %s$TARGET%s'% \
   (colours['green'], colours['purple'], colours['yellow'], colours['end']) 

#
# CUSTOMISE THE ENVIRONMENT HERE.
#

dir = os.environ.get('UW_DIR',None)
if dir is None:
   print 'UW_DIR environment variable not set! this must point to your StGermain directory.'
   sys.exit()

env = Environment(ENV=os.environ,
                  tools=['default', 'pcutest',  'stg',  'doc', 'dist'],
                  toolpath=[dir+'/share/StGermain/scripts'])



# Check if scons is launched with detail flag.
detail = ARGUMENTS.get('detail', 0)
Help("""
SCons Build Options:
    Type: './scons.py detail=1' to build Underworld showing full detail non-coloured stdout" 
""" )

# If detail flag is not set, let's use our own build strings.
if not int(detail):
    env['CXXCOMSTR'] = compile_source_message
    env['CCCOMSTR'] = compile_source_message
    env['SHCCCOMSTR'] = compile_source_message
    env['SHCXXCOMSTR'] = compile_source_message
    env['ARCOMSTR'] = link_library_message
    env['RANLIBCOMSTR'] = ranlib_library_message
    env['SHLINKCOMSTR'] = link_library_message
    env['LINKCOMSTR'] = link_program_message
    env['INSTALLSTR'] = install_message

# Load CREDO, the system testing tool
#env.Tool('credosystest', toolpath=[dir+'/credo/scons'])

# Needed for Darwin.
env['_abspath'] = lambda x: File(x).abspath

# Ludicrous-speed!
env.Decider("MD5-timestamp")

# Load configuration.
values = {}
execfile("config.cfg", globals(), values)
env._dict.update(values)

# Check if we're using 64bit.
if platform.architecture()[0] == '64bit':
    env.AppendUnique(CPPDEFINES=[('SYSTEM_SIZEOF_LONG', 8)])

# Need to manipulate the build directory to keep SCons happy. Because of SCons' target
# rules we need to make the build directory a default target.
env["build_dir"] = os.path.join(env.GetLaunchDir(), env["build_dir"])
env["prefix"] = os.path.join(env.GetLaunchDir(), env["prefix"])
env["INST_BUILD_DIR"] = env["build_dir"]
env["INST_PREFIX"] = env["prefix"]
env.Default(env["build_dir"])

# Add the build directory's include path.
env.AppendUnique(CPPPATH=env['build_dir'] + '/include')

# Need to define the extension for shared libraries as well
# as the library directory.
ext = env['ESCAPE']('"' + env['SHLIBSUFFIX'][1:] + '"')
lib_dir = env['ESCAPE']('"' + os.path.abspath(env['build_dir']) + '/lib' + '"')
env.AppendUnique(CPPDEFINES=[('MODULE_EXT', ext), ('LIB_DIR', lib_dir)])

# Include the library path.
env.AppendUnique(LIBPATH=env['build_dir'] + '/lib')
env.AppendUnique(RPATH=env.Dir(env['build_dir'] + '/lib').abspath)

# If we have no shared libraries, include a pre-processor definition to
# prevent modules from trying to load dynamically.
if not env['shared_libs']:
    env.AppendUnique(CPPDEFINES=['NOSHARED'])

# Need to extract some kind of hg version number.
subp = subprocess.Popen("hg identify",
                        stdout=subprocess.PIPE,
                        stderr=subprocess.PIPE,
                        shell=True)
out, err = subp.communicate()
res = subp.wait()
if res:
    print "Failed to extract hg revision number."
    hg_ver = 'unknown'
else:
    hg_ver = out.split()[0].strip()
env.AppendUnique(CPPDEFINES=[("VERSION", env["ESCAPE"]('"' + hg_ver + '"'))])

# Need to insert some 'HAVE_*' definitions based on what packages we
# found during configuration.
if 'HAVE_HDF5' in env['CPPDEFINES']:
    env.AppendUnique(CPPDEFINES=["READ_HDF5", "WRITE_HDF5"])

# If we were given a prefix other than the default, tell StGermain where to
# find XML include files.
if env['prefix'] != env.GetLaunchDir():
    env.AppendUnique(CPPDEFINES=[('STG_INCLUDE_PATH', env['ESCAPE']('"' + env['prefix'] + '/lib/StGermain"'))])

# Make sure 'install' has a proper target.
env.Alias("install", env["prefix"])

#
# INSERT TARGETS HERE.
#

Export('env')

SConscript('SConscript',
           variant_dir=env['build_dir'] + '/ImportersToolbox',
           duplicate=0)
