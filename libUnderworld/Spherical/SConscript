import os
Import('env')

#
# Need to make a copy because SCons uses the environment
# at it's final state, so StGermain ends up depending on
# StgDomain, etc.
#

env = env.Clone()
env['CURR_PROJECT'] = "Spherical"

#
# Inside each project we will be accessing headers without the
# project name as a prefix, so we need to let SCons know how to
# find those headers.
#

env.Append(CPPPATH=env['build_dir'] + '/include/Spherical')

#
# Need to include the Spherical library for binaries.
#

libs = ['Spherical'] + env.get('LIBS', [])

#
# Keep a list of all the objects we build so we can make a library
# afterwards.
#

objs = []
suites = []
tst_exp = []
tst_input = []

#
# Process each directory uniformly.
#

dirs = Split('Components libSpherical')
for d in dirs:

    # Need the module name, which is just the directory.
    mod_name = env['ESCAPE']('"' + ''.join(d.split('/')) + '"')
    cpp_defs = [('CURR_MODULE_NAME', mod_name)] + env.get('CPPDEFINES', [])

    # Setup where to look for files.
    src_dir = d + '/src'
    inc_dir = 'include/Spherical/' + d
    tst_dir = d + '/tests'
    tst_exp_dir = tst_dir + '/expected'
    tst_input_dir = tst_dir + '/input'
    tst_install_dir = 'tests/Spherical/' + d

    # Install the headers and '.def' files.
    hdrs = env.Install(inc_dir, Glob(src_dir + '/*.h'))

    # Build our source files.
    srcs = Glob(src_dir + '/*.c')
    objs += env.SharedObject(srcs, CPPDEFINES=cpp_defs)

    # Build any test suites we might find.
    suites += env.Object(Glob(tst_dir + '/*Suite.c'))

    # Install any test expected and input files
    tst_exp += env.Install(tst_install_dir + '/expected', Glob(tst_exp_dir + '/*'))
    tst_input += env.Install(tst_install_dir + '/input', Glob(tst_input_dir + '/*'))

# Need to install headers from libSpherical.
env.Install('include/Spherical', Glob('libSpherical/src/*.h'))

#
# Build plugins.
#
dirs = ['libSpherical/Toolbox', 
        'plugins/SphericalAlgorithms',
        'plugins/SimpleSteadyStateTest',
        'plugins/SphericalNusselt',
        'plugins/SphericalVrms']

pl_objs = []
pl_regs = []
for d in dirs:

    name = 'Spherical_' + d.split('/')[-1] + 'module'
    mod_name = env['ESCAPE']('"' + ''.join(d.split('/')) + '"')
    cpp_defs = [('CURR_MODULE_NAME', mod_name)] + env.get('CPPDEFINES', [])

    env.Install('include/Spherical/' + d.split('/')[-1], Glob(d + '/*.h'))

    srcs = Glob(d + '/*.c')
    cur_objs = env.SharedObject(srcs, CPPDEFINES=cpp_defs)

    # If we have shared libraries, build the dynamic plugin.
    if env['shared_libs']:
        lib_pre = env['LIBPREFIXES']
        if not isinstance(lib_pre, list):
            lib_pre = [lib_pre]
        env.SharedLibrary('lib/' + name, cur_objs,
                          SHLIBPREFIX='',
                          LIBPREFIXES=lib_pre + [''],
                          LIBS=libs)

    # If we are building static libs we need to construct a C file
    # mapping the plugin's name to its register function.
    if env['static_libs']:
        pl_regs += [name]

    # Keep track of all the plugin objects.
    pl_objs += cur_objs

#
# Build shared library.
#

if env['shared_libs']:
    env.SharedLibrary('lib/Spherical', objs)

#
# Test runner program.
#

env.PCUTest('tests/testSpherical', 
            suites,
            PCU_LIBHEADERS="#include <StGermain/StGermain.h>\n#include <StgDomain/StgDomain.h>\n"\
                           "#include <StgFEM/StgFEM.h>\n#include <PICellerator/PICellerator.h>\n"\
                           "#include <Underworld/Underworld.h>\n"\
                           "#include <Spherical/Spherical.h>\n",
            PCU_SETUP="StGermain_Init(&argc, &argv);\nModulesManager_LoadModule(stgToolboxesManager, \"Spherical\" );\n",
            PCU_TEARDOWN="StGermain_Finalise();",
            LIBS=libs, 
            PCU_EXP=tst_exp, 
            PCU_INPUT=tst_input, 
            PROJECT="Spherical" )

#
# Install XML input files.
#

env.Install('lib/StGermain/Spherical/', Glob('InputFiles/Spherical_Components/*.xml'))
env.Install('lib/StGermain/Spherical/Viewports', Glob('InputFiles/Spherical_Components/Viewports/*.xml'))
env.Install('lib/StGermain/Spherical/VCs', Glob('InputFiles/Spherical_Components/VCs/*.xml'))

env.Alias("install", env.Install(env['prefix'] + '/share/Spherical/', env.GetLaunchDir() + '/Spherical/InputFiles' ) ) 

# add system tests
env.AddLowResTestSuite('SysTests/Regression/testAll.py')

